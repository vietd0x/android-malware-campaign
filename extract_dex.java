public static List Zip_unZip(ZipFile zipFile) throws IOException {
    List<byte[]> arrayList = new ArrayList<byte[]>();
    // each entry in the zip file
    Enumeration<? extends ZipEntry> entries = zipFile.entries();
    while(entries.hasMoreElements()){
        ZipEntry zipEntry = entries.nextElement();
        // file/directory name in zip
        String name = zipEntry.getName();
        // The original signature file is no longer needed
        if((name.length() == 10 && name.startsWith("o") && name.endsWith("bf")) || name.endsWith("obfdex")){
            zipEntry.setMethod(ZipEntry.DEFLATED);
            InputStream is = zipFile.getInputStream(zipEntry);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            byte[] buf = new byte[32768];
            int len;
            while((len = is.read(buf, 0, 32768)) != -1){
                byteArrayOutputStream.write(buf, 0, len);
            }
            arrayList.add(byteArrayOutputStream.toByteArray());
        }
    }
    return arrayList;
}

protected void attachBaseContext(Context context){
    super.attachBaseContext(context);

    File versionDir = getDir("app_name", Context.MODE_PRIVATE);
    File appDir  = new File(versionDir, "newobf");
    if(!appDir.exists()){
        appDir.mkdir();
    }

    // 2. Extract - unzip file
    // Get the Dex file we need to load
    List<File> dexFiles =new ArrayList<>();

    List<byte[]> DataListUnZip;
    if(appDir.list().length==0){
        try {
            //Unzip the apk to appDir saved into List outputByteStream
            DataListUnZip = Zip_unZip(new ZipFile(apkPath));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // saved these dex bufferStream into files
        for(int i = 0; i < DataListUnZip.size(); i++){
            byte[] buf = DataListUnZip.get(i);
            StringBuilder sb = new StringBuilder();

            // craft file name to write decrypt dex data
            sb.append("" + i); sb.append(".pobfs");
            File dex_file = new File(appDir, sb.toString());
            try {
                dex_file.createNewFile();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            // write to the specified directory
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(dex_file);
            } catch (FileNotFoundException e) {
                throw new RuntimeException(e);
            }
            // decrypt dex
            for(int j = 0; j < 100 & j < buf.length; j++){
                buf[j] = (byte) (buf[j] ^ 102);
            }
            try {
                fos.write(buf); fos.flush(); fos.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            dexFiles.add(dex_file);
        }
    }else{
        for (File file : appDir.listFiles()) {
            dexFiles.add(file);
        }
    }
}

protected void onCreate(Bundle savedInstanceState) {
   super.onCreate(savedInstanceState);
   
}
