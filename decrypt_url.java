
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import org.apache.commons.codec.binary.Base64;
public class MainActivity extends AppCompatActivity {
    public byte[] dec(Cipher cipher, int i, byte[] data, int i2) {
        int i3 = i2 / 8;
        if (i != 2) {
            i3 -= 11;
        }
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        int i4 = 0;
        int i5 = 0;
        while (data.length > i4) {
            try {// i2 = 1024; i3 = 128
                byte[] doFinal = data.length - i4 > i3 ? cipher.doFinal(data, i4, i3) : cipher.doFinal(data, i4, data.length - i4);
                byteArrayOutputStream.write(doFinal, 0, doFinal.length);
                i5++;
                i4 = i5 * i3;
            } catch (Exception e) {
                throw new RuntimeException("加解密阀值为[" + i3 + "]的数据时发生异常", e); // The encryption and decryption threshold value is [,
                // ] An exception occurred when the data
            }
        }
        byte[] byteArray = byteArrayOutputStream.toByteArray();
        try {
            byteArrayOutputStream.close();
        } catch (IOException e2) {
            e2.printStackTrace();
        }
        return byteArray;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        Security.addProvider(new BouncyCastleProvider());

        List<String> data = new ArrayList<>();
        String pubKey = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDKNZMXTRpRLFXij79hEb2iaGZSBpzVJKbBMcHcu+BCzBpiKW2nAyY2BtDn2IYVjzKqPujBYg1cztykA7zlGHkeOG5Vlzh1mHTc4JaqwVM/VtqGnBsbmmurBbuJ6w5c+rXPqzH2XSx9S8fePTbrTK9x98UMSyAbU0wlBTJ1bJG9wwIDAQAB";
        data.add("kGg6A40F9f272nEoOAW1eqqXQvRLScaUtbTxvvY5xoIRV1yXZVjvkuBWXQK9V-36ppr2yrRLWF4pWXCEvyknuWhw5EJBPRGIYJVUPAxtSJnuQf1nH-cviFeUzqcd16n90372A4IU_n7N34649_PGsLbenurKUA5iagtGd5m8Mb8");
        data.add("bQ1Mud1Xcrighr2Ky6UjBlIWxhxyM1u-byBIiaUoIbFS1OoNGp-qtB826Weddr8n5VoGxFuMY39gwo2gA7ekW1kkLZG30vChUC2Q01yY62SfZCmgToLD-9L4q2xGopuAXuqM_t67igrkK_EaznvZFI7iennIVAZuBkmrzI3TasI");
        data.add("AU_uu9GWwwITKb78rGrGLuxmuZvgZVYC4qWcX_n_mNPyFuhCnUWU3X7jNf2j5T3qIbFKIjC4Y7ciZVTiQARUsrIIggzwupDEn-otbrLpojsn0CODmFMNMu_HIrteSa56jRiWlowbL7hCnksAIpT7fL2xCg9KYP70IzKFUt7jCwQ");
        data.add("LLxzW4wWKThO-Hyv9tOMWsPEX76PUW7UNkEKhgHFsoZqMHpz2NB3Nc4zKlXaXuA-r2hiBkro94r7KWmRjP3Wtn1pyot1lGmOwlpM8sZx0r1lwSpbVriwcfjuVOl0U6etm2h23LjrHDjpje94CwE54nWXwPUNK-1-PMW9eXobRMg");
        data.add("q82KdCD-B970Kb3svqNGPe__CGUvBl-fUI-vVi8KXCJXDDlXIDMMc_dkCiwRkICPDUD2lBndSD3SCgShGHOgsleOuB4FUD_R1Q2dbN49tKjmWrI0_ahSqYLvtbcItXlaVOhVtma4C8cYyWYlf1VqsbkiJfglXAXI3wSRRJ7F1wI");
        data.add("k7tJZcbyQVGyqaqAnYvntJrrpCvpC9cMoVN-FF3F5IGpvMNQYlwftrhi3-DFiBWB3-P7pgKb6vaNkVPlfAQSRv0Z1wKF8XKy_05GfKkmm5dgwrUL3_u-74Fc1qwfKW0tL5pJM6qvD6RBTw_EazOhiuT70kWxrPtj0TL8DLlhb9M");
        RSAPublicKey rSAPublicKey = null;
        try {
            rSAPublicKey = (RSAPublicKey) KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(Base64.decodeBase64(pubKey)));
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding", new BouncyCastleProvider());
            cipher.init(Cipher.DECRYPT_MODE, rSAPublicKey);
            for(int i = 0; i < data.size(); i++){
                String s = new String(dec(cipher, 2, Base64.decodeBase64(data.get(5)), rSAPublicKey.getModulus().bitLength()), "UTF-8");
                System.out.println(s);
            }

        } catch (InvalidKeySpecException e) {
            throw new RuntimeException(e);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (NoSuchPaddingException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (InvalidKeyException e) {
            throw new RuntimeException(e);
        }
    }
}
// add these lines into build.gradle
/*
  implementation 'org.bouncycastle:bcpkix-jdk15to18:1.68'
  implementation 'org.bouncycastle:bcprov-jdk15to18:1.68'
  implementation group: 'commons-codec', name: 'commons-codec', version: '1.16.0'
*/
// these line into proguard-rules.pro
/*
-keep class org.bouncycastle.jcajce.provider.** { *; }
-keep class org.bouncycastle.jce.provider.** { *; }
*/


